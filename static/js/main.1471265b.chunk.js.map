{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","email","name","id","className","alt","src","CardList","list","robots","map","item","key","username","SearchBox","searchChange","onChange","type","placeholder","Scroll","props","style","overflow","border","height","children","App","event","setState","search","target","value","state","fetch","then","response","json","users","this","filterRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uMAeeA,G,MAbF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,MAAMC,EAAa,EAAbA,KAAKC,EAAQ,EAARA,GAEtB,OACI,yBAAKC,UAAU,qDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,mBACpB,6BACI,4BAAKD,GACL,2BAAID,OCWLM,EAlBE,SAAC,GAAc,IAEpBC,EAFmB,EAAZC,OAEMC,KAAI,SAAAC,GACvB,OACE,kBAAC,EAAD,CAAMC,IAAKD,EAAKR,GAChBA,GAAIQ,EAAKR,GACTD,KAAMS,EAAKT,KACXW,SAAUF,EAAKE,SACfZ,MAAOU,EAAKV,WAGhB,OACI,6BACEO,ICDKM,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKX,UAAU,OACX,2BAAOA,UAAU,sCACbY,SAAUD,EACVE,KAAK,SACLC,YAAY,oBCGbC,EATA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAS,SAAUC,OAAO,kBAAkBC,OAAO,UAC3DJ,EAAMK,WCiDJC,E,kDA/Cb,aAAc,IAAD,8BACX,gBAiBFX,aAAa,SAACY,GACZ,EAAKC,SAAS,CAAEC,OAAOF,EAAMG,OAAOC,SAjBpC,EAAKC,MAAM,CACTvB,OAAO,GACPoB,OAAO,IAJE,E,gEAOO,IAAD,OAEjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GACJ,EAAKT,SAAS,CACZnB,OAAO4B,S,+BASJ,IAAD,EAEgBC,KAAKN,MAApBvB,EAFD,EAECA,OAAOoB,EAFR,EAEQA,OACNU,EAAa9B,EAAO+B,QAAO,SAAAC,GAC/B,OACIA,EAAMvC,KAAKwC,cAAcC,SAASd,EAAOa,kBAIjD,OAAQjC,EAAOmC,OAGX,yBAAKxC,UAAU,MACb,wBAAIA,UAAU,MAAd,cACA,kBAAC,EAAD,CAAWW,aAAcuB,KAAKvB,eAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUN,OAAQ8B,MANxB,wBAAInC,UAAU,MAAd,e,GAjCcyC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1471265b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = ({email,name,id}) => {\r\n   // const{email,name,id}=props\r\n    return (\r\n        <div className='bg-light-yellow dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot' src={`https://robohash.org/${id}?size=200x200`}/>\r\n            <div> \r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from './Card'\r\nconst CardList = ({robots}) => {\r\n\r\n      const list= robots.map(item=>{\r\n      return(\r\n        <Card key={item.id} \r\n        id={item.id}  \r\n        name={item.name} \r\n        username={item.username} \r\n        email={item.email}/>\r\n      )\r\n    })  \r\n    return (\r\n        <div>            \r\n         {list}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--yellow bg-lightest-yellow'\r\n                onChange={searchChange}\r\n                type='search' \r\n                placeholder='Search Robots'\r\n            />            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow:'scroll', border:'1px solid white',height:'500px'}}>\r\n            {props.children}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll\r\n","import React, { Component, } from 'react';\nimport './App.css';\nimport CardList from '../Components/CardList'\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state={\n      robots:[],\n      search:''\n    }\n  }\n  componentDidMount(){\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=> response.json())\n    .then(users=>{\n      this.setState({\n        robots:users\n      })\n    })   \n  }\n\n  searchChange=(event)=>{\n    this.setState({ search:event.target.value})\n    }\n\n  render(){\n\n    const {robots,search}=this.state\n      const filterRobots=robots.filter(robot=>{\n        return(  \n            robot.name.toLowerCase().includes(search.toLowerCase())\n        )\n    })\n\n    return !robots.length? \n    <h1 className='tc'>Loading</h1> :    \n       (\n        <div className=\"tc\">\n          <h1 className='f1'>RoboFriend</h1>\n          <SearchBox searchChange={this.searchChange}/>\n          <Scroll>\n          <CardList robots={filterRobots}/>\n          </Scroll>\n        </div>\n      );\n    }\n      \n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}